Knowledge Check 1.1
Given the following code, what will the output be:

String a = "bar";
String b = "bar";
System.out.println(a == b);

(1). True
2. False
3. Neither, there will be an error

Knowledge Check 1.2
Given the following code, what will x and y be set to:

boolean x,y;
if(x=false) {
	y=true;
}

(1). x=false, y=false
2. x=false, y=true
3. x=true, y=false
4. x=true, y=true

Knowledge Check 1.3
Given the following code, what will the final value of x be:

int x = 2;
switch(x) {
case 1: 
	x++;
case 2:
case 3:
	x++;
	break;
default:
	x++;
}

1. 2
(2). 3
3. 4
4. 5

Knowledge Check 1.4
What should the following code return:

Stream.of(1,2,3,4,5).filter(n > 10).findFirst();

(students write in answer)

Knowledge Check 1.5
Which of the following Function declarations would describe a FizzBuzz function?

1. Function<Integer, Integer> fizzBuzz;
2. Function<Integer, String> fizzBuzz;   - correct
3. Function<String, Integer> fizzBuzz;
4. Function<String, String> fizzBuzz;

Knowledge Check 1.6
What will the value of the nums array be after this code executes:

public class Example {
	final static int[] nums = {1,2,3,4};

	public static void main(String[] args) {
		nums[2] = 5;
	}
}

1. [1,2,3,4], because nums is final
2. [1,2,3,4], because nums is static
3. [1,2,3,4], because an exception will occur
(4). [1,2,5,4]

Knowledge Check 1.7
Given the following code, what will the final statement output:

class Pet { 
	public String getFavoriteFood() { return "kibble"; }
}
class Dog extends Pet {
	public void bark() { /*bark into the void*/ }
}
class Cat extends Pet {
	public String getFavoriteFood() { return "tuna";}
}

Pet pc = new Cat();
pc.getFavoriteFood();

1. "kibble"
(2). "tuna"
3. None, an exception will occur because our pc variable is the wrong type for Cat objects

Knowledge Check 1.8
Given the following code, what will the final statement output:

List unTypedList = List.of(1, "cat", false);
unTypedList.get(1).contains("at");

1. true
2. false
3. An exception will occur, because unTypedList[1] is not a String.
(4). An exception will occur, because String methods are not available on objects in unTypedList

Knowledge Check 1.9
Given the following code, what will the final statement output:

List<String> typedList  = List.of(1, "cat", false);
typedList.get(1).contains("at");

1. true
2. false
(3). An exception will occur, because you cannot add non-String objects to this list
4. An exception will occur, because String methods are not available on objects in this list

Knowledge Check 1.10
Which line in the following code will throw an exception:

1: List<String> coolList = new ArrayList<>();
2: if (coolList.get(3).startsWith("cat")) {
3: 	   System.out.println(coolList);
4: }

1. line 1
(2). line 2
3. line 3
4. line 4

Knowledge Check 1.11
Which category of exception should this code throw:

public int getSomeNumber(String text) {
	if(text.length() > 0) {
		return text.length();
	} else {
		// throw an exception here?
	}
}

1. checked
2. unchecked
(3). it depends


Knowledge Check 2.1
Which of the following endpoints would you use to create a new Book

1. PUT http://someurl.com/book-store/books
(2). POST http://someurl.com/book-store/books
3. PUT http://someurl.com/book-store/books/create
4. POST http://someurl.com/book-store/books/create

Knowledge Check 2.2
Assuming the parent class was annotated with @RequestMapping("/book-store"), which method signature and annotation would return a book requested by the following request:

GET http://someurl.com/book-store/books/{bookId}

1. 
@GetRequest("book-store/books/")
public getBook(Long bookId)
2.
@GetRequest("/book-store/books/{bookId}")
public getBook(@PathVariable Long bookId)
(3).
@GetRequest("/books/{bookId}")
public getBook(@PathVariable Long bookId)
4.
@GetRequest("/books/{bookId}")
public getBook(@RequestParam Long bookId)

Knowledge Check 2.3

Which of the three types of dependency injection seems the best?

1. Field-level injection with @Autowired
2. Constructor injection with @Autowired
3. Constructor injection without @Autowired
4. Xml-defined

Knowledge Check 2.4

Which Scope means make a new bean every time it's injected?

1. Singleton
(2). Prototype
3. Request
4. Application

Knowledge Check 2.5

How do we specify that we want to load a specific bean by name instead of using the default choice Spring Boot would make?

1. @Name("beanToLoad")
(2). @Qualifier("beanToLoad")
3. @Bean("beanToLoad")
4. @Autowire("beanToLoad")

Knowledge Check 3.1

Which of the following fields are Entity Types:

1. String name;
(2). Person neighbor;
3. Long millis;
(4). Elephant elephant;
5. Boolean isPurple;
6. BigDecimal averageSpeed;

Knowledge Check 3.2

Which of the following annotations could you apply to the following List of Shoe Entities

public class Person {
	@Id
	@GeneratedValue
	private Long id;

	private List<Shoe> shoes;
}

1. @OneToOne
(2). @OneToMany
3. @ManyToOne
(4). @ManyToMany

Knowledge Check 3.3

Which part of the application should contain your Entity definitions

1. Front End
2. Controller Layer
3. Application/Service Layer
(4). Data/Repository Layer
5. Database

Knowledge Check 3.4

Data Transform Objects (DTOs) allow you to customize the set of response data you return, while the @JsonView annotation enables you to return a subset of Entity data as a response. Which of the following scenarios would be best served by making DTOs instead of using @JsonView:

(1.) Your front end is maintained by a team of web developers and your back end is managed by DBAs.
2. You're trying to quickly prototype a full-stack application.
(3). Your front end is a single-page application that requires combined data from multiple Entities.
(4). Your legacy application uses extremely large Entity objects.
5. Your Entities match the data requirements of your web page, but they also contain sensitive information.

Knowledge Check 3.5

If I make changes to a managed Entity, those changes will be reflected in the database:

(1). True
2. False

Knowledge Check 3.6

Which method on an EntityManager should you use to save a new entity in the database?

(1). Persist
2. Merge
3. Find
4. Either Persist or Merge

Knowledge Check 3.7

When should you query into a Projection into an Entity class?

(1). You need to return a single Value type.
(2). You need an object that contains data from two, unrelated Entities.
3. You want to return an object containing both an Entity and its associated Entities.
4. You only need a couple fields from an Entity.

Knowledge Check 3.8

Which of the following is true:

1. Transactions should only be declared on Repositories.
2. Flushing will occur every time you execute a JPQL query.
3. Transactions are best specified declaratively, through the @Transactional annotation.
4. Change you make to Entity instances are immediately written to the database.